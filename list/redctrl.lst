C51 COMPILER V9.00   REDCTRL                                                               09/19/2016 23:14:03 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE REDCTRL
OBJECT MODULE PLACED IN .\out\redctrl.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE src\redctrl.c LARGE BROWSE INCDIR(.\inc) DEBUG OBJECTEXTEND PRINT(.\list\re
                    -dctrl.lst) OBJECT(.\out\redctrl.obj)

line level    source

   1          //红外遥控的控制文件
   2          
   3          #include "includes.h"
   4          
   5          sbit RED_CTRL = P3^3;
   6          sbit LED7 = P2^7;
   7          
   8          static IR_DATA IR_data;
   9          
  10          bit new_code;           //判断是否为新键值
  11          
  12          
  13          bit TimeOut = 0;                                                //超时标志
  14          bit Guide = 0;                                                  //引导码有效
  15          bit Continuous = 0;                                             //连发码
  16          unsigned char xdata IR_Time[33];                //保存两个下降沿之间的时间间隔
  17          
  18          unsigned char key_code = 0XFF;
  19          
  20          //红外遥控器解码程序
  21          void  Decode(void) 
  22          {
  23   1              unsigned char i = 0,j,k;
  24   1              static unsigned char *p;        //指向结构体IR_DATA的指针
  25   1              
  26   1              EX1 = 0;                //关闭外部中断
  27   1              p = &IR_data.addr1;
  28   1              
  29   1              for(k = 0;k < 4;k++)
  30   1              {
  31   2                      for(j = 0;j < 8;j++)
  32   2                      {
  33   3                              if((IR_Time[i] > D0MinTime) && (IR_Time[i] < D0MaxTime))
  34   3                  {
  35   4                      *p >>= 1;           // 右移1位，
  36   4                      *p &= 0x7f;         // 与0111 1111置0. 数据“0” 0.56ms低电平+0.56ms高电平
  37   4                  }
  38   3                  else if((IR_Time[i] > D1MinTime) && (IR_Time[i] < D1MaxTime))
  39   3                  {
  40   4                      *p >>= 1;           // 右移1位，
  41   4                      *p |= 0x80;         // 或1000 0000置1. 数据“1” 0.56ms低电平+1.69ms高电平
  42   4                  }
  43   3                  i++;
  44   3                      }
  45   2                      p++;
  46   2              }
  47   1              if(IR_data.data2 + IR_data.data1 == 0xFF)
  48   1              {
  49   2                      key_code = IR_data.data1;
  50   2                      new_code = 1;
  51   2              }
  52   1              else
  53   1              {
  54   2                      key_code = 0xFF;        /**非本机遥控器或数据错误**/
C51 COMPILER V9.00   REDCTRL                                                               09/19/2016 23:14:03 PAGE 2   

  55   2              }
  56   1              
  57   1              EX1 = 1;                //打开外部中断
  58   1      }
  59          
  60          
  61          
  62          
  63          //外部中断1的中断处理函数
  64          void INT1Service(void) interrupt 2 using 1
  65          {
  66   1              static unsigned char m=0;
  67   1              TR1=1;                  //定时器1开始工作
  68   1              
  69   1          T1_CNT_bk = T1_CNT;     // 备份时间计数值，即前一个下降沿到本下降沿的时间间隔
  70   1          T1_CNT = 0x00;          // 清空时间计数值
  71   1          if(TimeOut)             // 如果超时
  72   1          {
  73   2              //  TL0 = TIMER0_COUNT;     // 初始化定时器0       －0x1f（31）
  74   2              TimeOut = 0;        // 清除超时标志
  75   2              m = 0;              // 复位数据位
  76   2              T1_CNT = 0x00;      // 清空时间计数值
  77   2              Guide = 0;          // 清除引导标志
  78   2              Continuous = 0;     // 清除连_发标志
  79   2          }
  80   1          else       // 正常按键时长58.5ms～76.5ms
  81   1          {
  82   2              if(Guide | Continuous)          // 如果引导码有效
  83   2              {
  84   3                  IR_Time[m++] = T1_CNT_bk;       // 保存时间间隔
  85   3                  if(m == 32)   // 接收够32数据后
  86   3                  {
  87   4                      m = 0;
  88   4                      Guide = 0;    // 清除引导标志
  89   4                                       //new_code=1;
  90   4                                      TR1=0;
  91   4                      /*进行解码操作*/
  92   4                      Decode();     // 解码
  93   4                                              
  94   4                  }
  95   3              }
  96   2              if(T1_CNT_bk > GTime)   // 如果时间间隔>引导码时长
  97   2              {
  98   3                  Guide = 1;          // 使能引导标志
  99   3                  m = 0;
 100   3              };
 101   2              if(T1_CNT_bk > CTime)    // 如果时间间隔>连_发码时长
 102   2              {
 103   3                  Continuous = 1;      // 使能连_发标志
 104   3                  m = 0;
 105   3              }
 106   2          }//end of 超时
 107   1              
 108   1      }
 109          
 110          
 111          
 112          
 113          
 114          //遥控解码
 115          unsigned char redCodeReceice(void)
 116          {
C51 COMPILER V9.00   REDCTRL                                                               09/19/2016 23:14:03 PAGE 3   

 117   1              unsigned char i,j,k = 0;
 118   1              unsigned char code_value = 0,key = 0;
 119   1              unsigned char key_code[4] = {'\0'};
 120   1              
 121   1              for(i = 0 ;i < 19;i++)
 122   1              {
 123   2                      delayNus(400);                  
 124   2                      if(RED_CTRL)            //9ms内有高电平就判断为干扰
 125   2                      {
 126   3                              return 0xFF;
 127   3                      }
 128   2              }
 129   1              while(!RED_CTRL);               //等待9ms低电平过去
 130   1              
 131   1              //判断是否连发码
 132   1              for(i = 0;i < 5;i++)
 133   1              {
 134   2                      delayNus(500);
 135   2                      if(!RED_CTRL)
 136   2                      {
 137   3                              return 0xFF;
 138   3                      }
 139   2              }
 140   1              
 141   1              while(RED_CTRL);                //等待4.5ms高电平过去
 142   1              
 143   1              //接收四个字节的数据
 144   1              for(i = 0; i < 4; i++)
 145   1              {
 146   2                      //每个字节8位数据
 147   2                      for(j = 0; j < 8;j++)
 148   2                      {
 149   3                              while(!RED_CTRL);       //等待变为高电平
 150   3                              
 151   3                              while(RED_CTRL) //计算高电平时间
 152   3                              {
 153   4                                      delayNus(100);
 154   4                                      k++;
 155   4                                      //高电平时间过长就退出
 156   4                                      if(k >= 22)
 157   4                                      {
 158   5                                              return 0xFF;
 159   5                                      }
 160   4                              }
 161   3                              
 162   3                              code_value >>= 1;               //接收一位数据
 163   3                              if( k >= 8)
 164   3                              {
 165   4                                      code_value |= 0x80;             //高电平大于0.56,则为数据1
 166   4                              }
 167   3                              k = 0;                  //定时计数清零
 168   3                      }
 169   2                      key_code[i] = code_value;               //四个字节数据
 170   2              }
 171   1              
 172   1      
 173   1              key = key_code[2];
 174   1      
 175   1              return key;
 176   1      }


C51 COMPILER V9.00   REDCTRL                                                               09/19/2016 23:14:03 PAGE 4   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    545    ----
   CONSTANT SIZE    =      4    ----
   XDATA SIZE       =     42       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
